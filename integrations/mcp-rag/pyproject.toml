[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "deepagents-mcp-rag"
version = "1.0.0"
description = "DeepAgents & MCP Integration for Advanced RAG Systems"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DeepAgents Team", email = "team@deepagents.dev"}
]
requires-python = ">=3.11"
dependencies = [
    "fastmcp>=2.0.0",
    "deepagents>=0.0.5",
    "langchain>=0.2.14",
    "langchain-anthropic>=0.1.23",
    "langchain-community>=0.2.14",
    "langchain-qdrant>=0.1.3",
    "qdrant-client>=1.7.0",
    "sentence-transformers>=2.2.2",
    "ragas>=0.1.7",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
    "arize-phoenix>=4.0.0",
    "langsmith>=0.1.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "tiktoken>=0.5.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "rank-bm25>=0.2.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
observability = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-langchain>=0.1.0",
    "opentelemetry-exporter-otlp>=1.20.0",
]
benchmarking = [
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.urls]
Homepage = "https://github.com/donbr/deepagents"
Documentation = "https://github.com/donbr/deepagents/tree/main/integrations/mcp-rag"
Repository = "https://github.com/donbr/deepagents.git"
Issues = "https://github.com/donbr/deepagents/issues"

[project.scripts]
deepagents-mcp-server = "deepagents_mcp_rag.mcp.server:main"
deepagents-eval = "deepagents_mcp_rag.eval.cli:main"
deepagents-benchmark = "deepagents_mcp_rag.scripts.benchmark:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["deepagents_mcp_rag"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rank_bm25.*",
    "arize.phoenix.*",
    "ragas.*",
    "qdrant_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "requires_services: marks tests that require external services",
    "asyncio: marks tests as async tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]