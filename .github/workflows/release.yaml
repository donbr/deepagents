name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io

jobs:
  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          echo "# Changelog for ${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" >> CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" HEAD~10..HEAD >> CHANGELOG.md
          fi

          # Set output for release body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: DeepAgents ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'rc') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}

  # Build and publish Python packages
  build-python:
    name: Build Python Packages
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build core DeepAgents package
        run: |
          python -m build
          ls -la dist/

      - name: Build MCP RAG package
        working-directory: ./integrations/mcp-rag
        run: |
          python -m build
          ls -la dist/

      - name: Verify packages
        run: |
          twine check dist/*
          twine check integrations/mcp-rag/dist/*

      - name: Upload core package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages-core
          path: dist/*

      - name: Upload MCP RAG package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages-mcp-rag
          path: integrations/mcp-rag/dist/*

  # Build and publish Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/mcp-rag
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./integrations/mcp-rag
          file: ./integrations/mcp-rag/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release, build-python]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi

    steps:
      - name: Download core package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages-core
          path: dist/

      - name: Download MCP RAG package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages-mcp-rag
          path: mcp-rag-dist/

      - name: Publish core package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/

      - name: Publish MCP RAG package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_MCP_RAG_TOKEN }}
          packages_dir: mcp-rag-dist/

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, build-docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version references
        run: |
          VERSION=${{ needs.create-release.outputs.version }}

          # Update .claude/CLAUDE.md with new version
          sed -i "s/deepagents-mcp-rag:latest/deepagents-mcp-rag:${VERSION#v}/g" .claude/CLAUDE.md

          # Update compose.yaml with new image version
          sed -i "s|image: ghcr.io/.*/mcp-rag:.*|image: ghcr.io/${{ github.repository }}/mcp-rag:${VERSION#v}|g" integrations/mcp-rag/compose.yaml

      - name: Create documentation update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update version references to ${{ needs.create-release.outputs.version }}"
          title: "Update documentation for release ${{ needs.create-release.outputs.version }}"
          body: |
            Automated update of version references in documentation for release ${{ needs.create-release.outputs.version }}.

            Changes:
            - Updated Docker image references in .claude/CLAUDE.md
            - Updated compose.yaml image versions
          branch: docs/update-${{ needs.create-release.outputs.version }}

  # Deployment notification
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [create-release, build-docker, publish-pypi]
    if: always()

    steps:
      - name: Deployment summary
        run: |
          echo "üöÄ Release ${{ needs.create-release.outputs.version }} Summary:"
          echo ""
          echo "‚úÖ GitHub Release: Created"
          echo "üê≥ Docker Images: ${{ needs.build-docker.result }}"
          echo "üì¶ PyPI Packages: ${{ needs.publish-pypi.result }}"
          echo ""
          echo "Next steps:"
          echo "1. Update production deployments"
          echo "2. Notify team of new release"
          echo "3. Update environment configurations"
          echo ""
          echo "Docker images available at:"
          echo "  ${{ env.REGISTRY }}/${{ github.repository }}/mcp-rag:${{ needs.create-release.outputs.version }}"
          echo "  ${{ env.REGISTRY }}/${{ github.repository }}/mcp-rag:latest"